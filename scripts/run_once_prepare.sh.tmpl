#!/bin/bash

set -e

# ‚ï≠‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ïÆ
# ‚îÇ Fun√ß√µes auxiliares                           ‚îÇ
# ‚ï∞‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ïØ
command_exists() {
    command -v "$1" >/dev/null 2>&1
}

print_section() {
    echo ""
    echo "‚ï≠‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ïÆ"
    echo "‚îÇ $1"
    echo "‚ï∞‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ïØ"
}

# ‚ï≠‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ïÆ
# ‚îÇ In√≠cio                                        ‚îÇ
# ‚ï∞‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ïØ
echo "üöÄ [+] Iniciando script de prepara√ß√£o..."

# Atualiza√ß√£o do sistema
print_section "Atualizando sistema"
sudo apt update && sudo apt upgrade -y
echo "‚úÖ Sistema atualizado"

# Instalar Neovim
print_section "Verificando Neovim"
if command_exists nvim; then
    echo "‚úÖ Neovim j√° est√° instalado"
else
    echo "üì¶ Instalando Neovim..."
    sudo apt install -y neovim
    echo "‚úÖ Neovim instalado"
fi

# Instalar Docker
print_section "Verificando Docker"
if command_exists docker; then
    echo "‚úÖ Docker j√° est√° instalado"
else
    echo "üì¶ Instalando Docker..."
    for pkg in docker.io docker-doc docker-compose docker-compose-v2 podman-docker containerd runc; do
        sudo apt remove -y $pkg || true
    done

    sudo apt install -y ca-certificates curl
    sudo install -m 0755 -d /etc/apt/keyrings
    sudo curl -fsSL https://download.docker.com/linux/ubuntu/gpg -o /etc/apt/keyrings/docker.asc
    sudo chmod a+r /etc/apt/keyrings/docker.asc

    echo \
      "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.asc] https://download.docker.com/linux/ubuntu \
      $(. /etc/os-release && echo "${UBUNTU_CODENAME:-$VERSION_CODENAME}") stable" | \
      sudo tee /etc/apt/sources.list.d/docker.list > /dev/null

    sudo apt update
    sudo apt install -y docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin

    sudo groupadd docker || true
    sudo usermod -aG docker "$USER"
    echo "‚úÖ Docker instalado"
fi

# Instalar Zsh + Oh My Zsh
print_section "Verificando zsh"
if command_exists zsh; then
    echo "‚úÖ zsh j√° est√° instalado"
else
    echo "üì¶ Instalando zsh..."
    sudo apt install -y zsh
    echo "‚ú® Instalando Oh My Zsh..."
    sh -c "$(curl -fsSL https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/tools/install.sh)"
fi

# Instalar Bitwarden CLI
print_section "Verificando Bitwarden CLI"
if command_exists bw; then
    echo "‚úÖ Bitwarden CLI j√° est√° instalado"
else
    echo "üì¶ Instalando Bitwarden CLI..."
    sudo snap install bw
fi

# Clonar reposit√≥rio de projetos
print_section "Verificando reposit√≥rio de projetos"
if [[ ! -d "$HOME/projetos" && "$DEV_CONTAINER" == 0 ]]; then
    echo "üì¶ Clonando reposit√≥rio ambiente_dev..."
    git clone git@github.com.br:$GITHUB_USERNAME/ambiente_dev.git "$HOME/projetos"
else
    echo "‚úÖ Reposit√≥rio de projetos j√° est√° presente"
fi

# Login Bitwarden e recuperar chaves SSH
print_section "Bitwarden e chaves SSH"
echo "‚ùì Deseja logar no Bitwarden agora? (s/n)"
read -r bw_choice

if [[ "$bw_choice" =~ ^[sS]$ ]]; then
    echo "üîê Logando no Bitwarden..."
    if bw login && export BW_SESSION=$(bw unlock --raw); then
        echo "üîÑ Sincronizando Bitwarden..."
        bw sync --session "$BW_SESSION"

        echo "üì• Recuperando chaves SSH do Bitwarden..."
        mkdir -p ~/.ssh
        bw get notes 'a0527da9-fb66-4e78-a76d-b2de013f6396' --session "$BW_SESSION" > ~/.ssh/id_ed25519.pub
        bw get notes '91e31124-b887-4bc0-9332-b2de014b113d' --session "$BW_SESSION" > ~/.ssh/id_ed25519

        chmod 600 ~/.ssh/id_ed25519
        chmod 644 ~/.ssh/id_ed25519.pub

        echo "‚úÖ Chaves SSH restauradas com sucesso!"

        echo "Recuperando email"
        PRO_EMAIL=$(bw get username '65b3b24f-cf9d-414b-aed0-b1db002c8957' --session "$BW_SESSION")

        # Teste de conex√£o com o GitHub
        print_section "Testando conex√£o com github.com"
        if ssh -T git@github.com 2>&1 | grep -qEi "successfully authenticated|welcome to github"; then
            echo "‚úÖ Comunica√ß√£o com github.com OK"
        else
            echo "‚ö†Ô∏è  N√£o foi poss√≠vel autenticar com github.com via SSH"
        fi

            else
                echo "‚ùå Falha no login do Bitwarden. Etapa ignorada."
            fi
        else
            echo "‚ö†Ô∏è Login no Bitwarden ignorado pelo usu√°rio."
        fi

print_section "Configurando git"

git config --global core.sshcommand 'ssh -i ~/.ssh/id_ed25519'
git config --global alias.st status
git config --global alias.co checkout
git config --global alias.cm 'commit -m'
git config --global user.name $GITHUB_USERNAME
git config --global user.email $PRO_EMAIL

# Finaliza√ß√£o
print_section "Finalizado!"
echo "üèÅ Script de prepara√ß√£o conclu√≠do com sucesso."
