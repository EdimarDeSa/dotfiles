#! /bin/bash

set -e

# ╭──────────────────────────────────────────────╮
# │ Funções auxiliares                           │
# ╰──────────────────────────────────────────────╯
command_exists() {
    command -v "$1" >/dev/null 2>&1
}

print_section() {
    echo ""
    echo "╭──────────────────────────────────────────────╮"
    echo "│ $1"
    echo "╰──────────────────────────────────────────────╯"
}

# ╭──────────────────────────────────────────────╮
# │ Início                                       │
# ╰──────────────────────────────────────────────╯
echo "🚀 [+] Iniciando script de preparação..."

if [[ -z "$GITHUB_USERNAME" ]]; then
    GITHUB_USERNAME="EdimarDeSa"
fi

# ╭──────────────────────────────────────────────╮
# │ Atualização do sistema                       │
# ╰──────────────────────────────────────────────╯
print_section "Atualizando sistema"
touch "$HOME"/.hushlogin
mkdir -p "$HOME/.pswds"
sudo apt update && sudo apt upgrade -y
sudo apt install bash-completion
echo "✅ Sistema atualizado"

# ╭──────────────────────────────────────────────╮
# │ Instalar Neovim                              │
# ╰──────────────────────────────────────────────╯
print_section "Verificando Neovim"
if command_exists nvim; then
    echo "✅ Neovim já está instalado"
else
    echo "📦 Instalando Neovim..."
    sudo apt install -y neovim
    echo "✅ Neovim instalado"
fi

# ╭──────────────────────────────────────────────╮
# │ Instalar Docker                              │
# ╰──────────────────────────────────────────────╯
print_section "Verificando Docker"
if command_exists docker; then
    echo "✅ Docker já está instalado"
else
    echo "📦 Instalando Docker..."
    for pkg in docker.io docker-doc docker-compose docker-compose-v2 podman-docker containerd runc; do
        sudo apt remove -y $pkg || true
    done

    sudo apt install -y ca-certificates curl
    sudo install -m 0755 -d /etc/apt/keyrings
    sudo curl -fsSL https://download.docker.com/linux/ubuntu/gpg -o /etc/apt/keyrings/docker.asc
    sudo chmod a+r /etc/apt/keyrings/docker.asc

    echo \
      "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.asc] https://download.docker.com/linux/ubuntu \
      $(. /etc/os-release && echo "${UBUNTU_CODENAME:-$VERSION_CODENAME}") stable" | \
      sudo tee /etc/apt/sources.list.d/docker.list > /dev/null

    sudo apt update
    sudo apt install -y docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin

    sudo groupadd docker || true
    sudo usermod -aG docker "$USER"
    echo "✅ Docker instalado"
fi

# ╭──────────────────────────────────────────────╮
# │ Instalar Bitwarden CLI                       │
# ╰──────────────────────────────────────────────╯
print_section "Verificando Bitwarden CLI"
if command_exists bw; then
    echo "✅ Bitwarden CLI já está instalado"
else
    echo "📦 Instalando Bitwarden CLI..."
    sudo mkdir -p /usr/local/bin
    BW_ZIP=$(mktemp)

    curl -fsSL "https://bitwarden.com/download/?app=cli&platform=linux" -o "$BW_ZIP"
    sudo unzip -j "$BW_ZIP" bw -d /usr/local/bin
    sudo chmod +x /usr/local/bin/bw
    rm "$BW_ZIP"

    # Adicionar ao PATH se necessário
    if [[ ":$PATH:" != *":/usr/local/bin/:"* ]]; then
        echo 'export PATH="/usr/local/bin/:$PATH"' >> "$HOME"/.bashrc
    fi
fi

# ╭──────────────────────────────────────────────╮
# │ Instalação do jq                             │
# ╰──────────────────────────────────────────────╯
print_section "Verificando Jq"
if command_exists jq; then
    echo "✅ jq já está instalado"
else
    echo "Instalando jq"
    sudo apt install jq -y
    echo "jq instalado"
fi

# ╭──────────────────────────────────────────────╮
# │ Instalação do Git                            │
# ╰──────────────────────────────────────────────╯
print_section "Verificando Git"
if command_exists git; then
    echo "git já está instalado"
else
    echo "Instalando git"
    sudo apt install git -y
    echo "git instalado"
fi

# ╭──────────────────────────────────────────────╮
# │ Acesso bitwareden e SSH                      │
# ╰──────────────────────────────────────────────╯
print_section "Login bitwarden"
BW_BIN=/usr/local/bin/bw

if "$BW_BIN" status | grep -q "locked" > /dev/null 2>&1; then
  echo "Bitwarden ja está logado, desbloqueando..."
  BW_CMD="unlock"
else
  echo "Login no Bitwarden..."
  BW_CMD="login"
fi

echo "Desbloqueando Bitwarden..."
if [[ -f "$HOME/.pswds/bw" ]]; then
  BW_SESSION=$("$BW_BIN" $BW_CMD --raw --passwordfile "$HOME/.pswds/bw")
elif [[ -n "$BW_PASSWORD" ]]; then
  BW_SESSION=$("$BW_BIN" $BW_CMD --raw --passwordenv BW_PASSWORD)
else
  BW_SESSION=$("$BW_BIN" $BW_CMD --raw)
fi

# Configura chave SSH
mkdir -p "$HOME"/.ssh
chmod 700 "$HOME"/.ssh

export BW_SESSION=$BW_SESSION
"$BW_BIN" sync

# Extrai e configura as chaves SSH
get_ssh_key() {
    local ssh_file_path="$HOME/.ssh/$1"
    local ssh_file_path_pub="$HOME/.ssh/$1.pub"
    if [[ ! -f "$ssh_file_path" ]]; then
        "$BW_BIN" get item "$1" --session "$BW_SESSION" --raw | \
            jq -r '.notes' > "$ssh_file_path"

        "$BW_BIN" get item "$1" --session "$BW_SESSION" --raw | \
            jq -r '.fields[0].value' > "$ssh_file_path_pub"

        chmod 600 "$ssh_file_path"
        chmod 644 "$ssh_file_path_pub"

        eval "$(ssh-agent -s)" >/dev/null 2>&1
        ssh-add "$ssh_file_path"
    fi
}

# Chaves de deploy do github
get_ssh_key ssh_github
get_ssh_key dev_server
get_ssh_key efscode_github
get_ssh_key iap_1000

# ╭──────────────────────────────────────────────╮
# │ Configuração do git                          │
# ╰──────────────────────────────────────────────╯
print_section "Configurando git"

# Adiciona cor em todas as saídas do Git
git config --global color.ui auto

# Exibe status com branch, alterações e resumo mais visual
git config --global status.showUntrackedFiles all

# Mostra o diff com palavras (útil para Markdown e texto)
git config --global diff.compactionHeuristic true
git config --global diff.mnemonicPrefix true
git config --global diff.colorMoved zebra

# Editor padrão (mude se quiser usar o VS Code)
git config --global core.editor "code --wait"

# Evita sobrescrever mudanças locais sem querer ao fazer pull
git config --global pull.rebase false

# Garante que você verá conflitos se alguém mudou o mesmo trecho
git config --global merge.conflictstyle diff3

# Resumo de log com gráfico de branches
git config --global alias.lg "log --oneline --graph --decorate --all"

# Reset seguro do último commit (mantém as mudanças)
git config --global alias.undo "reset --soft HEAD~1"

# Adiciona todos os arquivos e faz commit com mensagem
git config --global alias.ac '!git add -A && git commit -m'

# Mostra qual branch remoto está sendo trackeado
git config --global branch.autosetupmerge always

# Cria aliases
git config --global alias.st status
git config --global alias.co checkout
git config --global alias.cm 'commit -m'

# Configura usuário padrão para os commits
git config --global user.name "$GITHUB_USERNAME"
git config --global user.email $("$BW_CMD" get username "ccffb181-84e2-4cd5-8d7a-b08200cb6bdb" --session $BW_SESSION)

# Dnado permissão de execução ao scripts pessoais
chmod +x "$HOME"/scripts/personal_functions/*

# Finalização
print_section "Finalizado!"
echo "🏁 Script de preparação concluído com sucesso."
