#! /bin/bash

set -e

# ╭──────────────────────────────────────────────╮
# │ Funções auxiliares                           │
# ╰──────────────────────────────────────────────╯
command_exists() {
    command -v "$1" >/dev/null 2>&1
}

print_section() {
    echo ""
    echo "╭──────────────────────────────────────────────╮"
    echo "│ $1"
    echo "╰──────────────────────────────────────────────╯"
}

# ╭──────────────────────────────────────────────╮
# │ Início                                       │
# ╰──────────────────────────────────────────────╯
echo "🚀 [+] Iniciando script de preparação..."

if [[ -z "$GITHUB_USERNAME" ]]; then
    GITHUB_USERNAME="EdimarDeSa"
fi

# ╭──────────────────────────────────────────────╮
# │ Atualização do sistema                       │
# ╰──────────────────────────────────────────────╯
print_section "Atualizando sistema"
touch ~/.hushlogin
sudo apt update && sudo apt upgrade -y
echo "✅ Sistema atualizado"

# ╭──────────────────────────────────────────────╮
# │ Instalar Neovim                              │
# ╰──────────────────────────────────────────────╯
print_section "Verificando Neovim"
if command_exists nvim; then
    echo "✅ Neovim já está instalado"
else
    echo "📦 Instalando Neovim..."
    sudo apt install -y neovim
    echo "✅ Neovim instalado"
fi

# ╭──────────────────────────────────────────────╮
# │ Instalar Docker                              │
# ╰──────────────────────────────────────────────╯
print_section "Verificando Docker"
if command_exists docker; then
    echo "✅ Docker já está instalado"
else
    echo "📦 Instalando Docker..."
    for pkg in docker.io docker-doc docker-compose docker-compose-v2 podman-docker containerd runc; do
        sudo apt remove -y $pkg || true
    done

    sudo apt install -y ca-certificates curl
    sudo install -m 0755 -d /etc/apt/keyrings
    sudo curl -fsSL https://download.docker.com/linux/ubuntu/gpg -o /etc/apt/keyrings/docker.asc
    sudo chmod a+r /etc/apt/keyrings/docker.asc

    echo \
      "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.asc] https://download.docker.com/linux/ubuntu \
      $(. /etc/os-release && echo "${UBUNTU_CODENAME:-$VERSION_CODENAME}") stable" | \
      sudo tee /etc/apt/sources.list.d/docker.list > /dev/null

    sudo apt update
    sudo apt install -y docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin

    sudo groupadd docker || true
    sudo usermod -aG docker "$USER"
    echo "✅ Docker instalado"
fi

# ╭──────────────────────────────────────────────╮
# │ Instalar Bitwarden CLI                       │
# ╰──────────────────────────────────────────────╯
print_section "Verificando Bitwarden CLI"
if command_exists bw; then
    echo "✅ Bitwarden CLI já está instalado"
else
    echo "📦 Instalando Bitwarden CLI..."
    sudo mkdir -p /usr/local/bin
    BW_ZIP=$(mktemp)

    curl -fsSL "https://bitwarden.com/download/?app=cli&platform=linux" -o "$BW_ZIP"
    sudo unzip -j "$BW_ZIP" bw -d /usr/local/bin
    sudo chmod +x /usr/local/bin/bw
    rm "$BW_ZIP"

    # Adicionar ao PATH se necessário
    if [[ ":$PATH:" != *":/usr/local/bin/:"* ]]; then
        echo 'export PATH="/usr/local/bin/:$PATH"' >> ~/.bashrc
    fi
fi

# ╭──────────────────────────────────────────────╮
# │ Instalação do Git                            │
# ╰──────────────────────────────────────────────╯
print_section "Verificando Git"
if command_exists git; then
    echo "git já está instalado"
else
    echo "Instalando git"
    sudo apt install git -y
    echo "git instalado"
fi

# ╭──────────────────────────────────────────────╮
# │ Acesso bitwareden e SSH                      │
# ╰──────────────────────────────────────────────╯
print_section "Login bitwarden"
BW_CMD=/usr/local/bin/bw
"$BW_CMD" logout 2>/dev/null || true

"$BW_CMD" login
BW_SESSION=$("$BW_CMD" login --raw)
# BW_SESSION=$("$BW_CMD" unlock --raw)

# Configura chave SSH
mkdir -p ~/.ssh
chmod 700 ~/.ssh

# Extrai e configura as chaves SSH
"$BW_CMD" get item "$SSH_ITEM" --session "$BW_SESSION" --raw | \
    jq -r '.sshKey.privateKey' > ~/.ssh/deploy_key

"$BW_CMD" get item "$SSH_ITEM" --session "$BW_SESSION" --raw | \
    jq -r '.sshKey.publicKey' > ~/.ssh/deploy_key.pub

# Altera o nível de permissão
chmod 600 ~/.ssh/deploy_key
chmod 644 ~/.ssh/deploy_key.pub

# Adicionar ao ssh-agent
eval "$(ssh-agent -s)" >/dev/null
ssh-add ~/.ssh/deploy_key

# ╭──────────────────────────────────────────────╮
# │ Configuração do git                          │
# ╰──────────────────────────────────────────────╯
print_section "Configurando git"

# Adiciona cor em todas as saídas do Git
git config --global color.ui auto

# Exibe status com branch, alterações e resumo mais visual
git config --global status.showUntrackedFiles all

# Mostra o diff com palavras (útil para Markdown e texto)
git config --global diff.compactionHeuristic true
git config --global diff.mnemonicPrefix true
git config --global diff.colorMoved zebra

# Editor padrão (mude se quiser usar o VS Code)
git config --global core.editor "code --wait"

# Evita sobrescrever mudanças locais sem querer ao fazer pull
git config --global pull.rebase false

# Garante que você verá conflitos se alguém mudou o mesmo trecho
git config --global merge.conflictstyle diff3

# Resumo de log com gráfico de branches
git config --global alias.lg "log --oneline --graph --decorate --all"

# Reset seguro do último commit (mantém as mudanças)
git config --global alias.undo "reset --soft HEAD~1"

# Adiciona todos os arquivos e faz commit com mensagem
git config --global alias.ac '!git add -A && git commit -m'

# Mostra qual branch remoto está sendo trackeado
git config --global branch.autosetupmerge always

# Cria aliases
git config --global alias.st status
git config --global alias.co checkout
git config --global alias.cm 'commit -m'

# Configura usuário padrão para os commits
git config --global user.name "$GITHUB_USERNAME"
if [[ -n "$PRO_EMAIL" ]]; then
    git config --global user.email "$PRO_EMAIL"
else
    echo "⚠️  E-mail profissional não encontrado. Configure manualmente com:"
    echo "    git config --global user.email 'seu@email.com'"
fi

# Dnado permissão de execução ao scripts pessoais
chmod +x "$HOME"/scripts/personal_functions/*

# Finalização
print_section "Finalizado!"
echo "🏁 Script de preparação concluído com sucesso."
echo "🔄 Para usar o zsh como shell padrão, execute: chsh -s $(which zsh)"
